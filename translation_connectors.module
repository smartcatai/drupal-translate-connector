<?php

require_once __DIR__ . '/inc/autoload.php';
require_once __DIR__ . '/inc/wrappers/admin/forms/statistic_filter.inc.php';
/**
 * Implements hook_init().
 */
function translation_connectors_init() {
  $connector = new SmartCAT\Drupal\Connector();
  $connector->plugin_init();
}

function translation_connectors_menu() {
  $items = [];

  //Настройки кредов к АПИ
  $items['admin/config/regional/translation_connectors'] = [
    'title' => 'Translation connectors',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['translation_connectors_config_form'],
    'access arguments' => ['administer entity translation'],
    'file' => 'inc/wrappers/admin/forms/config_form.inc',
    'module' => 'translation_connectors',
    'type' => MENU_NORMAL_ITEM,
  ];

  //Настройки кредов к АПИ
  $items['admin/config/regional/translation_connectors/default'] = [
    'title' => 'Required settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'access arguments' => ['administer entity translation'],
    'weight' => 1,
  ];

  //Дополнительные настройки, доступны если введены верные креды от АПИ
  if (\SmartCAT\Drupal\Helpers\SmartCAT::is_active()) {
    $items["admin/config/regional/translation_connectors/additional"] = [
      'title' => 'Additional settings',
      'page callback' => 'drupal_get_form',
      'page arguments' => ['translation_connectors_additional_form'],
      'access arguments' => ['administer entity translation'],
      'file' => 'inc/wrappers/admin/forms/additional_form.inc',
      'module' => 'translation_connectors',
      'type' => MENU_LOCAL_TASK,
      'weight' => 2,
    ];
  }

  $items["admin/config/regional/translation_connectors/statistics/start"] = [
    'page callback' => '\SmartCAT\Drupal\Ajax\Statistics::start',
    'access arguments' => ['administer entity translation'],
    'file' => 'inc/smartcat/Ajax/Statistics.php',
    'module' => 'translation_connectors',
    'type' => MENU_CALLBACK,
    'delivery callback' => 'ajax_deliver',
  ];

  $items["admin/config/regional/translation_connectors/statistics/check"] = [
    'page callback' => '\SmartCAT\Drupal\Ajax\Statistics::check',
    'access arguments' => ['administer entity translation'],
    'file' => 'inc/smartcat/Ajax/Statistics.php',
    'module' => 'translation_connectors',
    'type' => MENU_CALLBACK,
    'delivery callback' => 'ajax_deliver',
  ];

  $items["admin/config/regional/translation_connectors/statistics"] = [
    'title' => 'Translation progress',
    'page callback' => '\SmartCAT\Drupal\Drupal\Admin\Pages\Statistics::get',
    'access arguments' => ['administer entity translation'],
    'file' => 'inc/smartcat/Drupal/Admin/Pages/Statistics.php',
    'module' => 'translation_connectors',
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  ];

  //Обработчик колбэков от SmartCAT
  $items[\SmartCAT\Drupal\Handler\SmartCATCallbackHandler::ROUTE_PREFIX . '/%/%'] = [
    'page callback' => '\SmartCAT\Drupal\Handler\SmartCATCallbackHandler::handle',
    'access callback' => TRUE,
    'page arguments' => [2, 3],
    'file' => 'inc/smartcat/Handler/SmartCATCallbackHandler.php',
    'module' => 'translation_connectors',
    'type' => MENU_CALLBACK,
    'delivery callback' => 'ajax_deliver',
  ];

  $items['translation_connectors/queue_engine/%'] = [
    'page callback' => '\SmartCAT\Drupal\Queue\QueueEngine::process_callback',
    'page arguments' => [2],
    'access callback' => 'translation_connectors_queue_access_callback',
    'access arguments' => [2],
    'file' => 'inc/smartcat/Queue/QueueEngine.php',
    'module' => 'translation_connectors',
    'type' => MENU_CALLBACK,
  ];

  return $items;
}

function translation_connectors_menu_alter(&$items) {
  // Инициализируем валидатор схем пути из entity_translation
  $_null = NULL;
  _entity_translation_validate_path_schemes($_null, FALSE, $items);

  foreach (entity_get_info() as $entity_type => $info) {
    if (entity_translation_enabled($entity_type)) {
      $et_info = $info['translation']['entity_translation'];

      //Флаг что мы не смогли добавить вкладку
      $translate_ui_attached = FALSE;

      // Еще одна магия entity_translation по валидации схем путей для сущности
      _entity_translation_validate_path_schemes($et_info['path schemes'], $info['label'], FALSE, TRUE);

      foreach ($et_info['path schemes'] as $scheme) {
        $translate_item = NULL;

        // Если для сущности определен базовый путь, то привязваем к нему вкладку с отправкой на перевод
        if (isset($scheme['base path'])) {
          $translate_path = $scheme['base path'] . '/translation_connectors';

          $entity_position = array_search($scheme['path wildcard'], $scheme['base path parts']);

          $items[$translate_path] = [
            'title' => 'Submit for translation',
            'page callback' => 'drupal_get_form',
            'page arguments' => ['translation_connectors_send_to_translate_form', $entity_type, $entity_position],
            'type' => MENU_LOCAL_TASK,
            'weight' => 2,
            'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
            'access callback' => 'entity_translation_tab_access',
            'access arguments' => [$entity_type, $entity_position],
            'file' => 'inc/wrappers/admin/forms/send_to_translate_form.inc',
            'module' => 'translation_connectors',
          ];

          $translate_item = $items[$translate_path];
        }

        // Двигаем нашу вкладку за Translate.
        //Translate идет следующей за вкладкой редактирования, мы сдинемся правее

        if (isset($scheme['edit path'])) {
          // Ищем влкадку редактирования
          $real_edit_path_parts = $scheme['real edit path parts'];
          do {
            $edit_item = &$items[implode('/', $real_edit_path_parts)];
            array_pop($real_edit_path_parts);
          } while (!empty($edit_item['type']) && $edit_item['type'] == MENU_DEFAULT_LOCAL_TASK);

          if ($translate_item && $edit_item && isset($edit_item['weight'])) {
            $translate_item['weight'] = $edit_item['weight'] + 2;
          }
        }

        $translate_ui_attached = $translate_ui_attached || $translate_item;

        unset($translate_item);
      }

      if ($translate_ui_attached == FALSE) {
        watchdog('translation_connectors', 'The entities of type %entity_type do not define a valid path scheme: it will not be possible to translate them.', ['%entity_type' => $info['label']]);
      }

    }
  }
  drupal_static_reset('_entity_translation_validate_path_schemes');
}

/**
 * Access callback для очереди
 *
 * @param $queue_name
 *
 * @return bool
 */
function translation_connectors_queue_access_callback($queue_name) {
  return isset($_GET['key']) && $_GET['key'] == variable_get('cron_key', 'drupal');
}

function translation_connectors_doit() {
  $entities = node_load_multiple([7]);
  //return "<pre>" . print_r($entities[7], true) . "</pre>";
  //$lanuages = entity_translation_languages();
  //return "<pre>" . print_r($lanuages, true) . "</pre>";
  //return drupal_get_hash_salt();
  //return drupal_get_private_key();
  $notice = new \SmartCAT\Drupal\Drupal\Notice();
  $notice->add_error(t('You must enter API login and password', [], ['context' => 'translation_connectors']));
  return '';
}
